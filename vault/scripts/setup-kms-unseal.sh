#!/bin/bash
# AWS KMS Auto-Unseal Configuration for HashiCorp Vault
# Sets up AWS KMS key for automatic unsealing of Vault

set -e

# Configuration
AWS_REGION=${AWS_REGION:-"us-east-1"}
KMS_KEY_ALIAS="alias/genesis-vault-unseal"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    print_error "AWS CLI is not installed. Please install it first."
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    print_error "AWS credentials not configured. Please configure AWS CLI."
    exit 1
fi

print_status "Setting up AWS KMS for Vault auto-unseal..."

# Check if key alias already exists
KEY_ID=$(aws kms describe-key --key-id "$KMS_KEY_ALIAS" --region "$AWS_REGION" 2>/dev/null | jq -r '.KeyMetadata.KeyId' || echo "")

if [ -z "$KEY_ID" ]; then
    print_status "Creating new KMS key for Vault..."
    
    # Create KMS key
    KEY_RESPONSE=$(aws kms create-key \
        --description "HashiCorp Vault auto-unseal key for Genesis Trading Platform" \
        --key-usage ENCRYPT_DECRYPT \
        --key-spec SYMMETRIC_DEFAULT \
        --region "$AWS_REGION" \
        --tags TagKey=Project,TagValue=Genesis TagKey=Component,TagValue=Vault TagKey=Environment,TagValue=Production)
    
    KEY_ID=$(echo "$KEY_RESPONSE" | jq -r '.KeyMetadata.KeyId')
    KEY_ARN=$(echo "$KEY_RESPONSE" | jq -r '.KeyMetadata.Arn')
    
    print_status "KMS key created: $KEY_ID"
    
    # Create alias
    aws kms create-alias \
        --alias-name "$KMS_KEY_ALIAS" \
        --target-key-id "$KEY_ID" \
        --region "$AWS_REGION"
    
    print_status "KMS key alias created: $KMS_KEY_ALIAS"
else
    KEY_ARN=$(aws kms describe-key --key-id "$KEY_ID" --region "$AWS_REGION" | jq -r '.KeyMetadata.Arn')
    print_warning "KMS key already exists: $KEY_ID"
fi

# Create IAM policy for Vault
print_status "Creating IAM policy for Vault..."

cat > /tmp/vault-kms-policy.json <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VaultKMSUnseal",
            "Effect": "Allow",
            "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:GenerateDataKey"
            ],
            "Resource": "$KEY_ARN"
        }
    ]
}
EOF

# Create or update the policy
POLICY_ARN=$(aws iam create-policy \
    --policy-name "GenesisVaultKMSUnsealPolicy" \
    --policy-document file:///tmp/vault-kms-policy.json \
    --description "Policy for Vault KMS auto-unseal" \
    --region "$AWS_REGION" 2>/dev/null | jq -r '.Policy.Arn' || \
    aws iam list-policies --query "Policies[?PolicyName=='GenesisVaultKMSUnsealPolicy'].Arn" --output text --region "$AWS_REGION")

if [ -n "$POLICY_ARN" ]; then
    print_status "IAM policy created/found: $POLICY_ARN"
else
    print_error "Failed to create IAM policy"
    exit 1
fi

# Create IAM user for Vault (if not exists)
print_status "Setting up IAM user for Vault..."

if ! aws iam get-user --user-name genesis-vault 2>/dev/null; then
    aws iam create-user --user-name genesis-vault
    print_status "IAM user 'genesis-vault' created"
else
    print_warning "IAM user 'genesis-vault' already exists"
fi

# Attach policy to user
aws iam attach-user-policy \
    --user-name genesis-vault \
    --policy-arn "$POLICY_ARN"

print_status "Policy attached to user"

# Create access key for Vault user
print_status "Creating access key for Vault user..."

# Delete existing access keys if any (max 2 allowed)
EXISTING_KEYS=$(aws iam list-access-keys --user-name genesis-vault --query 'AccessKeyMetadata[].AccessKeyId' --output text)
if [ -n "$EXISTING_KEYS" ]; then
    print_warning "Removing existing access keys..."
    for key in $EXISTING_KEYS; do
        aws iam delete-access-key --user-name genesis-vault --access-key-id "$key"
    done
fi

# Create new access key
ACCESS_KEY_RESPONSE=$(aws iam create-access-key --user-name genesis-vault)
ACCESS_KEY_ID=$(echo "$ACCESS_KEY_RESPONSE" | jq -r '.AccessKey.AccessKeyId')
SECRET_ACCESS_KEY=$(echo "$ACCESS_KEY_RESPONSE" | jq -r '.AccessKey.SecretAccessKey')

# Update Vault configuration
print_status "Updating Vault configuration..."

# Create production Vault config with KMS auto-unseal
cat > vault/config/vault-prod.hcl <<EOF
# HashiCorp Vault Production Configuration with AWS KMS Auto-Unseal
# Generated by setup-kms-unseal.sh

# Enable UI for administration
ui = true

# Cluster identification
cluster_name = "genesis-vault"

# Logging configuration
log_level = "Info"
log_format = "json"

# API listener configuration with TLS
listener "tcp" {
  address = "0.0.0.0:8200"
  
  # TLS Configuration for production
  tls_cert_file = "/vault/config/certs/vault.crt"
  tls_key_file  = "/vault/config/certs/vault.key"
  tls_min_version = "tls12"
  
  # Performance tuning
  max_request_size = 33554432
  max_request_duration = "90s"
  
  # CORS configuration for UI
  cors {
    enabled = true
    allowed_origins = ["https://vault.genesis.local"]
  }
}

# Cluster listener for HA
listener "tcp" {
  address = "0.0.0.0:8201"
  tls_cert_file = "/vault/config/certs/vault.crt"
  tls_key_file  = "/vault/config/certs/vault.key"
  tls_min_version = "tls12"
  cluster_address = "0.0.0.0:8201"
}

# Storage backend configuration
storage "file" {
  path = "/vault/data"
  max_parallel = 128
}

# AWS KMS Auto-Unseal Configuration
seal "awskms" {
  region = "$AWS_REGION"
  kms_key_id = "$KMS_KEY_ALIAS"
  
  # Optional: Use specific AWS credentials (if not using instance profile)
  # access_key = "$ACCESS_KEY_ID"
  # secret_key = "$SECRET_ACCESS_KEY"
  
  # Optional: Custom endpoint for testing
  # endpoint = "https://kms.$AWS_REGION.amazonaws.com"
}

# API and cluster addresses
api_addr = "https://vault.genesis.local:8200"
cluster_addr = "https://vault.genesis.local:8201"

# Performance and security settings
default_lease_ttl = "168h"  # 7 days
max_lease_ttl = "720h"      # 30 days
disable_mlock = false
disable_cache = false

# Telemetry configuration for monitoring
telemetry {
  statsite_address = "127.0.0.1:8125"
  statsd_address = "127.0.0.1:8125"
  prometheus_retention_time = "24h"
  disable_hostname = false
}
EOF

# Save AWS credentials securely
print_status "Saving AWS credentials for Vault..."

# Create secure credentials file
cat > vault/config/.aws-credentials <<EOF
# AWS Credentials for Vault KMS Auto-Unseal
# KEEP THIS FILE SECURE - DO NOT COMMIT TO GIT
AWS_REGION=$AWS_REGION
AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY
KMS_KEY_ID=$KEY_ID
KMS_KEY_ARN=$KEY_ARN
KMS_KEY_ALIAS=$KMS_KEY_ALIAS
EOF

chmod 600 vault/config/.aws-credentials

# Update .gitignore
if ! grep -q "vault/config/.aws-credentials" .gitignore; then
    echo "vault/config/.aws-credentials" >> .gitignore
    print_status "Added AWS credentials to .gitignore"
fi

# Create environment file for Docker
cat > vault/.env <<EOF
# Vault AWS KMS Configuration
AWS_REGION=$AWS_REGION
AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY
EOF

chmod 600 vault/.env

# Update Docker Compose for production with KMS
cat > docker-compose.vault-prod.yml <<EOF
# HashiCorp Vault Production Configuration with AWS KMS Auto-Unseal
version: '3.8'

services:
  vault:
    image: vault:1.15
    container_name: genesis-vault-prod
    restart: unless-stopped
    ports:
      - "8200:8200"
      - "8201:8201"
    environment:
      VAULT_ADDR: 'https://0.0.0.0:8200'
      VAULT_API_ADDR: 'https://0.0.0.0:8200'
      AWS_REGION: \${AWS_REGION}
      AWS_ACCESS_KEY_ID: \${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: \${AWS_SECRET_ACCESS_KEY}
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/config:/vault/config:ro
      - ./vault/data:/vault/data
      - ./vault/logs:/vault/logs
      - ./vault/policies:/vault/policies:ro
    command: vault server -config=/vault/config/vault-prod.hcl
    networks:
      - genesis-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    env_file:
      - ./vault/.env

networks:
  genesis-network:
    driver: bridge
    name: genesis-network

volumes:
  vault-data:
    driver: local
EOF

# Test KMS access
print_status "Testing KMS access..."

TEST_DATA="test-data-for-vault-unseal"
ENCRYPTED=$(aws kms encrypt \
    --key-id "$KMS_KEY_ALIAS" \
    --plaintext "$TEST_DATA" \
    --region "$AWS_REGION" \
    --output text \
    --query CiphertextBlob)

if [ -n "$ENCRYPTED" ]; then
    DECRYPTED=$(aws kms decrypt \
        --ciphertext-blob "$ENCRYPTED" \
        --region "$AWS_REGION" \
        --output text \
        --query Plaintext | base64 -d)
    
    if [ "$DECRYPTED" = "$TEST_DATA" ]; then
        print_status "KMS encryption/decryption test successful"
    else
        print_error "KMS decryption test failed"
        exit 1
    fi
else
    print_error "KMS encryption test failed"
    exit 1
fi

# Clean up test file
rm -f /tmp/vault-kms-policy.json

# Display summary
echo ""
print_status "========================================="
print_status "AWS KMS Auto-Unseal Configuration Complete"
print_status "========================================="
echo ""
print_status "KMS Key ID: $KEY_ID"
print_status "KMS Key ARN: $KEY_ARN"
print_status "KMS Key Alias: $KMS_KEY_ALIAS"
print_status "AWS Region: $AWS_REGION"
print_status "IAM User: genesis-vault"
print_status "IAM Policy: $POLICY_ARN"
echo ""
print_warning "IMPORTANT: AWS credentials saved to:"
print_warning "  - vault/config/.aws-credentials (for reference)"
print_warning "  - vault/.env (for Docker)"
echo ""
print_status "To use production Vault with KMS auto-unseal:"
print_status "  1. Ensure TLS certificates are in place"
print_status "  2. Run: docker-compose -f docker-compose.vault-prod.yml up -d"
print_status "  3. Vault will auto-unseal using AWS KMS"
echo ""
print_warning "SECURITY NOTES:"
print_warning "  - Never commit AWS credentials to git"
print_warning "  - Rotate access keys regularly"
print_warning "  - Monitor KMS key usage in AWS CloudTrail"
print_warning "  - Enable MFA for the AWS account"