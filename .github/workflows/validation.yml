name: Validation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      validators:
        description: 'Specific validators to run (comma-separated)'
        required: false
        default: ''
      critical_only:
        description: 'Run only critical validators'
        required: false
        type: boolean
        default: false

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11.8']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt
    
    - name: Run validation pipeline
      run: |
        if [ "${{ github.event.inputs.critical_only }}" = "true" ]; then
          python scripts/validation_pipeline.py --critical-only --github-action --output validation_results.json
        elif [ -n "${{ github.event.inputs.validators }}" ]; then
          python scripts/validation_pipeline.py --validators ${{ github.event.inputs.validators }} --github-action --output validation_results.json
        else
          python scripts/validation_pipeline.py --github-action --output validation_results.json
        fi
    
    - name: Upload validation results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-results
        path: validation_results.json
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('validation_results.json', 'utf8'));
          
          let comment = '## üîç Validation Results\n\n';
          
          if (results.overall_passed) {
            comment += '‚úÖ **All validations passed!**\n\n';
          } else {
            comment += '‚ùå **Some validations failed!**\n\n';
          }
          
          comment += `**Overall Score:** ${results.overall_score.toFixed(1)}%\n\n`;
          comment += '### Validator Results\n\n';
          comment += '| Validator | Status | Score |\n';
          comment += '|-----------|--------|-------|\n';
          
          for (const [name, validator] of Object.entries(results.validators)) {
            const status = validator.passed ? '‚úÖ' : '‚ùå';
            const score = validator.score.toFixed(1);
            comment += `| ${name} | ${status} | ${score}% |\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail if validation failed
      if: failure()
      run: exit 1

  critical-validators:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/dev.txt
    
    - name: Run critical validators only
      run: |
        python scripts/validation_pipeline.py --critical-only --github-action
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const { context } = require('@actions/github');
          console.error('Critical validators failed! This blocks deployment.');
          process.exit(1);