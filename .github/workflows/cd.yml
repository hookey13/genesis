name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11.8'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.genesis-bot.example.com
    steps:
      - uses: actions/checkout@v4
        
      - name: Deploy to staging server
        run: |
          echo "Deploying image ${{ needs.build-and-push.outputs.image-tag }} to staging"
          # Add actual deployment commands here (e.g., SSH to server, docker-compose pull & up)
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging environment"
          # Add smoke test commands
          
      - name: Notify deployment status
        if: always()
        run: |
          echo "## Staging Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: ${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://genesis-bot.example.com
    steps:
      - uses: actions/checkout@v4
        
      - name: Backup current production
        run: |
          echo "Creating backup of current production deployment"
          # Add backup commands
          
      - name: Deploy to production server
        run: |
          echo "Deploying image ${{ needs.build-and-push.outputs.image-tag }} to production"
          # Add actual deployment commands here
          
      - name: Run health checks
        run: |
          echo "Running health checks against production"
          # Add health check commands
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
          
      - name: Notify deployment status
        if: always()
        run: |
          echo "## Production Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: ${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-22.04
    if: failure()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous version"
          # Add rollback commands
          
      - name: Notify rollback
        run: |
          echo "⚠️ **Deployment rolled back**" >> $GITHUB_STEP_SUMMARY