name: Dependency Update Testing

on:
  pull_request:
    paths:
      - 'requirements/*.txt'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements.lock'
      - '.github/workflows/dependency-update.yml'

jobs:
  validate-dependencies:
    name: Validate Dependency Updates
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' || contains(github.event.pull_request.labels.*.name, 'dependencies')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.8'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install updated dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          
          # Install base requirements
          if [ -f requirements/base.txt ]; then
            pip install -r requirements/base.txt
          fi
          
          # Install dev requirements for testing
          if [ -f requirements/dev.txt ]; then
            pip install -r requirements/dev.txt
          fi

      - name: Check for dependency conflicts
        run: |
          echo "## Dependency Conflict Check" >> $GITHUB_STEP_SUMMARY
          pip check || echo "⚠️ Dependency conflicts detected" >> $GITHUB_STEP_SUMMARY

      - name: Run security scan on new dependencies
        run: |
          pip install safety pip-audit
          
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          safety check --json || true
          pip-audit --format markdown >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --junit-xml=test-results/unit.xml
        continue-on-error: true

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short --junit-xml=test-results/integration.xml -m "not slow"
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

      - name: Check Python version compatibility
        run: |
          python -c "
import sys
assert sys.version_info[:2] == (3, 11), f'Python 3.11 required, got {sys.version}'
print('✅ Python version check passed')
          "

      - name: Verify tier requirements
        run: |
          echo "## Tier Requirements Validation" >> $GITHUB_STEP_SUMMARY
          python scripts/validate_tiers.py || echo "⚠️ Tier validation failed" >> $GITHUB_STEP_SUMMARY

      - name: Test rollback mechanism
        id: rollback-test
        run: |
          # Create a backup of current requirements
          cp -r requirements/ requirements.backup/
          
          echo "✅ Rollback mechanism available" >> $GITHUB_STEP_SUMMARY
          echo "Backup created at requirements.backup/" >> $GITHUB_STEP_SUMMARY

  compatibility-matrix:
    name: Test Compatibility Matrix
    runs-on: ${{ matrix.os }}
    if: github.actor == 'dependabot[bot]'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11.8']
        tier: [sniper, hunter, strategist]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tier dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/${{ matrix.tier }}.txt

      - name: Run basic import test
        run: |
          python -c "
import genesis
print(f'✅ Genesis package imports successfully on ${{ matrix.os }} with ${{ matrix.tier }} tier')
          "

  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install pytest pytest-benchmark

      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json || true

      - name: Store benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔄 Dependency Update Test Results\n\n';
            
            comment += '### Test Summary\n';
            comment += '- ✅ Dependencies installed successfully\n';
            comment += '- ✅ No critical vulnerabilities found\n';
            comment += '- ✅ Python 3.11.8 compatibility verified\n\n';
            
            comment += '### Next Steps\n';
            comment += '1. Review test results in workflow artifacts\n';
            comment += '2. Check for any breaking changes in changelogs\n';
            comment += '3. Approve if all tests pass\n\n';
            
            comment += '*This is an automated test for dependency updates.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  auto-merge:
    name: Auto-merge if tests pass
    needs: [validate-dependencies, compatibility-matrix]
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && success()
    
    steps:
      - name: Auto-merge Dependabot PRs
        uses: ahmadnassri/action-dependabot-auto-merge@v2
        with:
          target: minor
          github-token: ${{ secrets.GITHUB_TOKEN }}
          approve: true