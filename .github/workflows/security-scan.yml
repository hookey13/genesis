name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.8'

      - name: Install scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit

      - name: Install dependencies
        run: |
          if [ -f requirements/base.txt ]; then
            pip install -r requirements/base.txt
          fi
          if [ -f requirements/dev.txt ]; then
            pip install -r requirements/dev.txt
          fi

      - name: Run Safety scan
        id: safety
        continue-on-error: true
        run: |
          echo "## Safety Scan Results" >> $GITHUB_STEP_SUMMARY
          safety check --json --output safety-report.json || true
          safety check --output text >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Run pip-audit scan
        id: pip-audit
        continue-on-error: true
        run: |
          echo "## pip-audit Scan Results" >> $GITHUB_STEP_SUMMARY
          pip-audit --format json --output pip-audit-report.json || true
          pip-audit --format markdown >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Run custom scanner
        id: custom-scan
        run: |
          python -m genesis.security.dependency_scanner
          if [ -f vulnerability_report.json ]; then
            echo "## Custom Scanner Results" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('vulnerability_report.json') as f:
    data = json.load(f)
    print(f\"- Total packages: {data['total_packages']}\")
    print(f\"- Vulnerable packages: {data['vulnerable_packages']}\")
    print(f\"- Critical: {data['summary']['critical']}\")
    print(f\"- High: {data['summary']['high']}\")
    print(f\"- Medium: {data['summary']['medium']}\")
    print(f\"- Low: {data['summary']['low']}\")
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload scan reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-reports
          path: |
            safety-report.json
            pip-audit-report.json
            vulnerability_report.json

      - name: Check thresholds
        run: |
          python -c "
import json
import sys

# Load custom scanner report
try:
    with open('vulnerability_report.json') as f:
        data = json.load(f)
        critical = data['summary']['critical']
        high = data['summary']['high']
        
        # Fail if critical vulnerabilities found
        if critical > 0:
            print(f'‚ùå Found {critical} CRITICAL vulnerabilities!')
            sys.exit(1)
            
        # Fail if more than 3 high vulnerabilities
        if high > 3:
            print(f'‚ùå Found {high} HIGH vulnerabilities (threshold: 3)!')
            sys.exit(1)
            
        print('‚úÖ Vulnerability scan passed thresholds')
except FileNotFoundError:
    print('‚ö†Ô∏è No vulnerability report found')
          "

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.8'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit scan
        run: |
          echo "## Bandit Code Security Scan" >> $GITHUB_STEP_SUMMARY
          bandit -r genesis/ -f json -o bandit-report.json || true
          bandit -r genesis/ -f txt >> $GITHUB_STEP_SUMMARY || echo "No security issues found" >> $GITHUB_STEP_SUMMARY

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.8'

      - name: Install pip-licenses
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Check licenses
        run: |
          echo "## License Compliance Check" >> $GITHUB_STEP_SUMMARY
          pip-licenses --format=markdown --with-urls >> $GITHUB_STEP_SUMMARY

      - name: Check for GPL licenses
        run: |
          # Fail if GPL licenses found (adjust as needed)
          pip-licenses --fail-on="GPL;LGPL" || echo "‚ö†Ô∏è Found GPL licenses"

  notify-on-failure:
    name: Notify on Security Issues
    needs: [dependency-scan, code-security-scan, secret-scan]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Create issue for security vulnerabilities
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üîí Security Scan Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Failed
            
            The automated security scan has detected vulnerabilities that need attention.
            
            **Workflow Run:** [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            Please review the scan results and address any critical or high-severity vulnerabilities.
            
            ### Actions Required:
            1. Review the scan reports in the workflow artifacts
            2. Update vulnerable dependencies
            3. Re-run the security scan
            
            cc: @security-team
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['security', 'automated', 'high-priority']
            });