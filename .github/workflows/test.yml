name: Test Pipeline

'on':
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11.8'
  CACHE_VERSION: v1

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements/dev.txt
      
      - name: Run Black formatter check
        run: black --check --diff genesis/ tests/
      
      - name: Run Ruff linter
        run: ruff check genesis/ tests/
      
      - name: Run MyPy type checker
        run: mypy genesis/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install pip-audit safety bandit
      
      - name: Run pip-audit
        run: pip-audit --desc --format json
        continue-on-error: true
      
      - name: Run safety check
        run: safety check --json
        continue-on-error: true
      
      - name: Run bandit security linter
        run: bandit -r genesis/ -ll -i -x '*/tests/*,*/test_*.py'
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ['3.11.8']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
      
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit -v --cov=genesis --cov-report=xml --cov-report=html --cov-report=term
        env:
          PYTHONPATH: ${{ github.workspace }}
          DEPLOYMENT_ENV: test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
      
      - name: Run integration tests
        run: |
          pytest tests/integration -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}
          DEPLOYMENT_ENV: test
          BINANCE_TESTNET: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            .pytest_cache/
            htmlcov/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: genesis-trading:test
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}
      
      - name: Test Docker image size
        run: |
          docker images genesis-trading:test
          SIZE=$(docker images genesis-trading:test --format "{{.Size}}")
          echo "Image size: $SIZE"
          # Check if size is under 500MB (approximate check)
          if [[ "$SIZE" == *"GB"* ]]; then
            echo "ERROR: Image size exceeds 500MB target"
            exit 1
          fi
      
      - name: Run Docker health check
        run: |
          docker run --rm genesis-trading:test python -m genesis.api.health basic

  paper-trading-validation:
    name: Paper Trading Validation
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [docker-build, integration-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        run: |
          docker compose version
      
      - name: Create test environment file
        run: |
          cat > .env.test <<EOF
          DEPLOYMENT_ENV=test
          BINANCE_API_KEY=${{ secrets.BINANCE_TESTNET_API_KEY }}
          BINANCE_API_SECRET=${{ secrets.BINANCE_TESTNET_API_SECRET }}
          BINANCE_TESTNET=true
          DATABASE_URL=sqlite:///app/.genesis/data/genesis_test.db
          LOG_LEVEL=INFO
          EOF
      
      - name: Start paper trading environment
        run: |
          docker compose -f docker/docker-compose.yml --env-file .env.test up -d
      
      - name: Wait for services to be healthy
        run: |
          timeout 120 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 5; done'
      
      - name: Run paper trading tests
        run: |
          docker compose exec -T genesis python -m pytest tests/integration/test_paper_trading_suite.py -v
        continue-on-error: true
      
      - name: Collect logs
        if: always()
        run: |
          docker compose logs > paper-trading-logs.txt
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: paper-trading-logs
          path: paper-trading-logs.txt
      
      - name: Stop services
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml down -v

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint, security, unit-tests, integration-tests, docker-build]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.security.result }}" != "success" || \
                "${{ needs.unit-tests.result }}" != "success" || \
                "${{ needs.integration-tests.result }}" != "success" || \
                "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "One or more tests failed"
            exit 1
          fi
          echo "All tests passed successfully!"