name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11.8'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          
      - name: Run Black formatter check
        run: black --check --line-length 88 genesis/ tests/
        
      - name: Run Ruff linter
        run: ruff check genesis/ tests/
        
      - name: Run MyPy type checker
        run: mypy genesis/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          pip install safety bandit detect-secrets
          
      - name: Run Safety check
        run: safety check --json
        continue-on-error: true
        
      - name: Run Bandit security scan
        run: bandit -r genesis/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Check for secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
          
      - name: Run ${{ matrix.test-type }} tests
        run: |
          pytest tests/${{ matrix.test-type }}/ \
            --cov=genesis \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit-${{ matrix.test-type }}.xml \
            -v
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage

  docker:
    name: Docker Build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: genesis:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm genesis:ci-${{ github.sha }} python -c "import genesis; print('Genesis imported successfully')"
          
      - name: Validate docker-compose files
        run: |
          docker-compose -f docker/docker-compose.yml config
          docker-compose -f docker/docker-compose.prod.yml config

  coverage:
    name: Coverage Report
    needs: test
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
          
      - name: Generate coverage report
        run: |
          pytest tests/ --cov=genesis --cov-report=html --cov-report=term
          
      - name: Check coverage thresholds
        run: |
          coverage report --fail-under=70
          
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  quality-gates:
    name: Quality Gates
    needs: [lint, security, test, docker]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - uses: actions/checkout@v4
        
      - name: Check quality gates
        run: |
          echo "## Quality Gate Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if all required jobs passed
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" ]]; then
            echo "✅ **All quality gates PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Linting passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Security scan passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Tests passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Docker build passed" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **Quality gates FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Docker: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi